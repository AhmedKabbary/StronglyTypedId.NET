using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using StronglyTypedId.Extensions;
using StronglyTypedId.Sources;
using StronglyTypedId.Utilities;

namespace StronglyTypedId;

[Generator(LanguageNames.CSharp)]
public class StronglyTypedIdGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(initializationContext =>
        {
            initializationContext.AddSource("StronglyTypedIdAttribute.g.cs", StronglyTypedIdAttribute.Source);
        });

        var structsDeclarationsValuesProvider =
            context.SyntaxProvider.ForAttributeWithMetadataName(
                "StronglyTypedId.Attributes.StronglyTypedIdAttribute",
                (node, _) => node is StructDeclarationSyntax structDeclarationSyntax && structDeclarationSyntax.Modifiers.Any(SyntaxKind.PartialKeyword),
                (syntaxContext, _) => (INamedTypeSymbol)syntaxContext.TargetSymbol
            );

        context.RegisterSourceOutput(structsDeclarationsValuesProvider, (productionContext, structSymbol) =>
        {
            var sourceBuilder = new SourceBuilder();
            GenerateSourceCode(sourceBuilder, structSymbol);
            productionContext.AddSource($"{structSymbol.Name}.g.cs", sourceBuilder.ToString());
        });
    }

    private static void GenerateSourceCode(SourceBuilder sourceBuilder, ISymbol structSymbol)
    {
        var structName = structSymbol.Name;

        sourceBuilder.AppendLine("// <auto-generated/>");
        sourceBuilder.AppendLine("#nullable enable");
        sourceBuilder.AppendLine();

        #region Usings

        sourceBuilder.AppendLine("using System.Text.Json;");
        sourceBuilder.AppendLine("using System.Text.Json.Serialization;");
        sourceBuilder.AppendLine("using MongoDB.Bson.Serialization;");
        sourceBuilder.AppendLine("using MongoDB.Bson.Serialization.Attributes;");
        sourceBuilder.AppendLine("using MongoDB.Bson.Serialization.Serializers;");

        #endregion

        sourceBuilder.AppendLine();

        if (!structSymbol.ContainingNamespace.IsGlobalNamespace)
        {
            sourceBuilder.Append("namespace ");
            sourceBuilder.AppendLine(structSymbol.ContainingNamespace.ToDisplayString());
            sourceBuilder.AppendLine("{");
            sourceBuilder.AddIndent();
        }

        sourceBuilder.AppendLine($"[BsonSerializer(typeof({structName}BsonSerializer))]");
        sourceBuilder.AppendLine($"[JsonConverter(typeof({structName}SystemTextJsonConverter))]");
        sourceBuilder.AppendLine($"public readonly partial struct {structName} : IEquatable<{structName}>");
        sourceBuilder.AddCodeBlock(_ =>
        {
            #region Constructors

            sourceBuilder.Append($"public {structName}() => Value = Ulid.NewUlid().ToString()!;");
            sourceBuilder.AppendLine();

            sourceBuilder.Append($"public {structName}(String value) => Value = value;");
            sourceBuilder.AppendLine();

            #endregion

            sourceBuilder.AppendLine();

            #region Properties

            sourceBuilder.Append("public String Value { get; }");
            sourceBuilder.AppendLine();

            #endregion

            sourceBuilder.AppendLine();

            #region Static helper methods

            sourceBuilder.AppendLine($"public static {structName} New() => new();");
            sourceBuilder.AppendLine($"public static {structName} Parse(String value) => new(value);");

            #endregion

            sourceBuilder.AppendLine();

            #region Operators overloading

            sourceBuilder.AppendLine($"public static bool operator ==({structName} left, {structName} right) => left.Equals(right);");
            sourceBuilder.AppendLine($"public static bool operator !=({structName} left, {structName} right) => !(left == right);");

            #endregion

            sourceBuilder.AppendLine();

            #region IEquatable

            sourceBuilder.AppendLine($"public bool Equals({structName} other) => Value == other.Value;");

            #endregion

            sourceBuilder.AppendLine();

            #region Overrides

            sourceBuilder.AppendLine($"public override bool Equals(Object? obj) => obj is {structName} other && Equals(other);");
            sourceBuilder.AppendLine("public override int GetHashCode() => Value.GetHashCode();");
            sourceBuilder.AppendLine("public override String ToString() => Value;");

            #endregion

            sourceBuilder.AppendLine();

            #region System.Text.Json Converter

            GenerateSystemTextJsonConverter(sourceBuilder, structSymbol);

            #endregion

            sourceBuilder.AppendLine();

            #region MongoDB.Bson Serializer

            GenerateBsonConverter(sourceBuilder, structSymbol);

            #endregion
        });

        if (!structSymbol.ContainingNamespace.IsGlobalNamespace)
        {
            sourceBuilder.RemoveIndent();
            sourceBuilder.AppendLine("}");
        }
    }

    private static void GenerateSystemTextJsonConverter(SourceBuilder sourceBuilder, ISymbol structSymbol)
    {
        var structName = structSymbol.Name;

        sourceBuilder.AppendLine($"public class {structName}SystemTextJsonConverter : JsonConverter<{structName}>");
        sourceBuilder.AddCodeBlock(_ =>
        {
            sourceBuilder.AppendLine($"public override {structName} Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)");
            sourceBuilder.AddCodeBlock(_ => sourceBuilder.AppendLine($"return new {structName}(reader.GetString()!);"));

            sourceBuilder.AppendLine();

            sourceBuilder.AppendLine($"public override void Write(Utf8JsonWriter writer, {structName} value, JsonSerializerOptions options)");
            sourceBuilder.AddCodeBlock(_ => sourceBuilder.AppendLine("writer.WriteStringValue(value.Value);"));
        });
    }

    private static void GenerateBsonConverter(SourceBuilder sourceBuilder, ISymbol structSymbol)
    {
        var structName = structSymbol.Name;

        sourceBuilder.AppendLine($"public class {structName}BsonSerializer : SerializerBase<{structName}>");
        sourceBuilder.AddCodeBlock(_ =>
        {
            sourceBuilder.AppendLine($"public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, {structName} value)");
            sourceBuilder.AddCodeBlock(_ => sourceBuilder.AppendLine("context.Writer.WriteString(value.Value);"));

            sourceBuilder.AppendLine();

            sourceBuilder.AppendLine($"public override {structName} Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)");
            sourceBuilder.AddCodeBlock(_ => sourceBuilder.AppendLine($"return new {structName}(context.Reader.ReadString());"));
        });
    }
}